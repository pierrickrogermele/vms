#!/bin/bash
# vi: fdm=marker

# Constants {{{1
################################################################

DFT_DEVELOPMENT_FOLDER=$HOME/dev/container-galaxy-k8s-runtime
DFT_GALAXY_ADMIN_EMAIL="admin@glx.com"
DFT_GALAXY_ADMIN_PASSWORD="admin"
DFT_GALAXY_API_KEY="qwertyuio"
GALAXY_IMAGE=glx
GALAXY_PULL_POLICY="IfNotPresent"
SCRIPT_NAME="${0##*/}"
TOOL2CONTAINER_MAPPING_FILE="phenomenal_tools2container.yaml"
YES=yes
Z_SHORTCUT=-abdDlx
CNT_GLX_17_09=
CNT_GLX_18_01="-i sneumann/galaxy-web-k8s:v18.01-pheno-dev"
CNT_GLX_DEVELOP_BRANCH="-abrxdDl -L galaxy.log --enable-postgres --helm-chart-version 0.4.0"

# Global variables {{{1
################################################################

ALL_STAGES=
BLD_GLX_CONT=
CHART="galaxy-helm-repo/galaxy"
CHART_VERSION=
DEBUG=0
DEV=
DEVELOPMENT_FOLDER=${PHNMNK_CNT_GLX_PATH:-$DFT_DEVELOPMENT_FOLDER}
GALAXY_ADMIN_EMAIL=${PHNMNK_GLX_ADMIN_EMAIL:-$DFT_GALAXY_ADMIN_EMAIL}
GALAXY_ADMIN_PASSWORD=${PHNMNK_GLX_ADMIN_PASSWORD:-$DFT_GALAXY_ADMIN_PASSWORD}
GALAXY_API_KEY=${PHNMNK_GLX_API_KEY:-$DFT_GALAXY_API_KEY}
GALAXY_LOGS=
GALAXY_LOG_FILE=
MINIKUBE_DASHBOARD=
MINIKUBE_DELETE=
OPEN_GALAXY=
PORT_FORWARDING=
POSTGRES=
PV_MINIKUBE="yes"
RBAC_NEEDED=
RUN_GLX_CONT_SCRIPT=
STAGE_1=
STAGE_2=
STAGE_3=

# Info {{{1
################################################################

function info {

	local msg=$1

	echo "[INFO] $msg" >&2
}

# Debug {{{1
################################################################

function debug {

	local msg=$1
	local level=$2
	[[ -n $level ]] || level=1

	[[ $DEBUG -lt $level ]] || echo "[DEBUG] $msg" >&2
}

# Warning {{{1
################################################################

function warning {

	local msg=$1

	echo "[WARNING] ***** $msg *****" >&2
}

# Error {{{1
################################################################

function error {

	local msg=$1

	echo "[ERROR] $msg" >&2

	exit 1
}

# Join {{{1
################################################################

function join {

	local IFS="$1";
	shift;

	echo "$*";
}

# Print help {{{1
################################################################

function print_help {
	echo "Usage: $SCRIPT_NAME [options]"
	echo
	echo "Run PhenoMeNal Galaxy inside minikube."
	echo
	echo "Options:"
	echo "   -a, --all-stages                        Run all stages."
	echo "   -1, --stage-1                           Run stage 1."
	echo "   -2, --stage-2                           Run stage 2."
	echo "   -3, --stage-3                           Run stage 3."
	echo "   -b, --build-galaxy-container            Build the Galaxy container. Implies --dev."
	echo "       --cnt-glx-path           <path>     Set the path to the container-galaxy-k8s-runtime cloned repository. Can be set also through environment variable PHNMNK_CNT_GLX_PATH. Default value is $DFT_DEVELOPMENT_FOLDER."
	echo "   -d, --minikube-dashboard                Open the minikube dashboard in browser."
	echo "   -D, --minikube-delete                   Delete minikube vm before starting."
	echo "   -e, --dev                               Development mode. Use path set with --cnt-glx-path or PHNMNK_CNT_GLX_PATH env var, to find Galaxy configuration to use and Galaxy tools to install."
	echo "   -g, --debug                             Debug mode."
	echo "       --glx-admin-email        <email>    Set the email for administrator account in Galaxy. Can be set also through environment variable PHNMNK_GLX_ADMIN_EMAIL. Default value is $DFT_GALAXY_ADMIN_EMAIL."
	echo "       --glx-admin-password     <pass>     Set the password for administrator account in Galaxy. Can be set also through environment variable PHNMNK_GLX_ADMIN_PASSWORD. Default value is $DFT_GALAXY_ADMIN_PASSWORD."
	echo "       --glx-api-key            <token>    Set the API key to connect to Galaxy. Can be set also through environment variable PHNMNK_GLX_API_KEY. Default value is $DFT_GALAXY_API_KEY."
	echo "       --glx-18.01                         Configure for Galaxy 18.01 with options \"$CNT_GLX_18_01\"."
	echo "       --glx-develop                       Configure for develop branch of container-galaxy-k8s-runtime with options \"$CNT_GLX_DEVELOP_BRANCH\"."
	echo "       --helm-chart-version     <version>  Set the Helm chart version to use."
	echo "       --run-glx-cnt-script                Use simplified_galaxy_stable_container_creation.sh script to build Galaxy container."
	echo "   -h, --help                              Print this help message."
	echo "   -i, --galaxy-image           <image>    Set the Docker Galaxy image to use."
	echo "   -l, --galaxy-logs                       Open stream to Galaxy logs."
	echo "   -L, --galaxy-log-file        <filename> Set name of Galaxy log file."
	echo "   -p, --port-forwarding                   Forward ports 30000 and 30700 from the virtual machine to the host."
	echo "       --enable-postgres                   Enable Postgres in Galaxy."
	echo "   -r, --rbac                              Enable RBAC."
	echo "   -x, --open-galaxy                       Open Galaxy main page in browser."
	echo "   -z                                      Shortcut for $Z_SHORTCUT."
	echo
}

# Read args {{{1
################################################################

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		shift_count=1
		case $1 in
			-1|--stage-1)            STAGE_1=$YES ;;
			-2|--stage-2)            STAGE_2=$YES ;;
			-3|--stage-3)            STAGE_3=$YES ;;
			-a|--all-stages)         ALL_STAGES=$YES ;;
			-b|--build-container)    BLD_GLX_CONT=$YES ;;
			--cnt-glx-path)          DEVELOPMENT_FOLDER="$2" ; shift_count=2 ;;
			-d|--minikube-dashboard) MINIKUBE_DASHBOARD=$YES ;; 
			-D|--minikube-delete)    MINIKUBE_DELETE=$YES ;;
			-e|--dev)                DEV=$YES ;;
			-g|--debug)              DEBUG=$((DEBUG + 1)) ;;
			--glx-admin-email)       GALAXY_ADMIN_EMAIL="$2" ; shift_count=2 ;;
			--glx-admin-password)    GALAXY_ADMIN_PASSWORD="$2" ; shift_count=2 ;;
			--glx-api-key)           GALAXY_API_KEY="$2" ; shift_count=2 ;;
			--glx-develop)           set -- $1 $CNT_GLX_DEVELOP_BRANCH "${@:2}" ;;
			--glx-18.01)             set -- $1 $CNT_GLX_18_01 "${@:2}" ;;
			-h|--help)               print_help ; exit 0 ;;
			--helm-chart-version)    CHART_VERSION="$2" ; shift_count=2 ;;
			-i|--galaxy-image)       GALAXY_IMAGE="$2" ; shift_count=2 ;;
			-l|--galaxy-logs)        GALAXY_LOGS=$YES ;;
			-L|--galaxy-log-file)    GALAXY_LOG_FILE="$2" ; shift_count=2 ;;
			-p|--port-forwarding)    PORT_FORWARDING=$YES ;;
			--enable-postgres)       POSTGRES=$YES ;;
			-r|--rbac)               RBAC_NEEDED=$YES ;;
			--run-glx-cnt-script)    RUN_GLX_CONT_SCRIPT=$YES ;;
			-x|--open-galaxy)        OPEN_GALAXY=$YES ;;
			-z)                      set -- $1 $Z_SHORTCUT "${@:2}" ;;
			-) error "Illegal option $1." ;;
			--) error "Illegal option $1." ;;
			--*) error "Illegal option $1." ;;
			-?) error "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z0-9]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift $shift_count
	done
	shift $((OPTIND - 1))

	# Check values
	[[ $BLD_GLX_CONT == $YES && ( -z $DEVELOPMENT_FOLDER || ! -d $DEVELOPMENT_FOLDER ) ]] && error "The path set for container-galaxy-k8s-runtime repository is not valid: \"$DEVELOPMENT_FOLDER\"."
	[[ $BLD_GLX_CONT == $YES ]] && GALAXY_IMAGE=glx

	# Debug messages
	debug "Command line arguments: $args"
	debug "Argument ALL_STAGES=$ALL_STAGES"
	debug "Argument BLD_GLX_CONT=$BLD_GLX_CONT"
	debug "Argument CHART=$CHART"
	debug "Argument CHART_VERSION=$CHART_VERSION"
	debug "Argument DEBUG=$DEBUG"
	debug "Argument DEV=$DEV"
	debug "Argument DEVELOPMENT_FOLDER=$DEVELOPMENT_FOLDER"
	debug "Argument GALAXY_ADMIN_EMAIL=$GALAXY_ADMIN_EMAIL"
	debug "Argument GALAXY_ADMIN_PASSWORD=$GALAXY_ADMIN_PASSWORD"
	debug "Argument GALAXY_API_KEY=$GALAXY_API_KEY"
	debug "Argument GALAXY_LOGS=$GALAXY_LOGS"
	debug "Argument GALAXY_LOG_FILE=$GALAXY_LOG_FILE"
	debug "Argument MINIKUBE_DASHBOARD=$MINIKUBE_DASHBOARD"
	debug "Argument MINIKUBE_DELETE=$MINIKUBE_DELETE"
	debug "Argument OPEN_GALAXY=$OPEN_GALAXY"
	debug "Argument PORT_FORWARDING=$PORT_FORWARDING"
	debug "Argument POSTGRES=$POSTGRES"
	debug "Argument PV_MINIKUBE=$PV_MINIKUBE"
	debug "Argument RBAC_NEEDED=$RBAC_NEEDED"
	debug "Argument RUN_GLX_CONT_SCRIPT=$RUN_GLX_CONT_SCRIPT"
	debug "Argument STAGE_1=$STAGE_1"
	debug "Argument STAGE_2=$STAGE_2"
	debug "Argument STAGE_3=$STAGE_3"
}	

# Check kubectl {{{1
################################################################

check_kubectl() {

	[[ -n $(which kubectl) ]] || error "Unable to find kubectl. Please install kubectl. Use \"brew install kubectl\" under macOS or \"apt-get install kubectl\" under Debian systems."

	client_version=$(kubectl version | grep '^Client' | sed 's/^.*GitVersion:"\([^"]*\)".*$/\1/')
	server_version=$(kubectl version | grep '^Server' | sed 's/^.*GitVersion:"\([^"]*\)".*$/\1/')
	info "kubectl client version: $client_version"
	info "kubectl server version: $server_version"

	client_version_no_patch=$(echo $client_version | sed 's/\.[0-9]*$//')
	server_version_no_patch=$(echo $server_version | sed 's/\.[0-9]*$//')
	[[ $client_version_no_patch == $server_version_no_patch ]] || error "kubectl version mismatch between client ($client_version) and server ($server_version). Please upgrade your kubeclt installation. Use \"brew upgrade kubectl\" under macOS or \"apt-get upgrade kubectl\" under Debian systems."
	[[ $client_version == $server_version ]] || warning "kubectl patch version mismatch between client ($client_version) and server ($server_version). You might consider an upgrade of your kubeclt installation. Use \"brew upgrade kubectl\" under macOS or \"apt-get upgrade kubectl\" under Debian systems."
}

# Start minikube {{{1
################################################################

function start_minikube {
	[[ $MINIKUBE_DELETE == $YES ]] && minikube delete
	rm -rf $HOME/.helm
	minikube start || error "cannot start minikube !"
	check_kubectl
}

# Wait for Minikube {{{1
################################################################

function wait_for_minikube {

	# Wait for Minikube
	echo -n Waiting for Minikube...
	while ! wget -O /dev/null http://$(minikube ip):30000 2>/dev/null ; do
		echo -n .
		sleep 1
	done
	echo
	info "Minikube dashboard is ready and listening to http://$(minikube ip):30000"
}

# Check helm {{{1
################################################################

check_helm() {

	[[ -n $(which helm) ]] || error "Unable to find helm. Please install helm. Use \"brew install kubectl\" under macOS or \"apt-get install kubectl\" under Debian systems."

	# Check versions
	client_version=$(helm version | grep ^Client | sed 's/^.*SemVer:"\([^"]*\)".*$/\1/')
	server_version=$(helm version | grep ^Server | sed 's/^.*SemVer:"\([^"]*\)".*$/\1/')
	info "Helm client version: $client_version"
	info "Helm server version: $server_version"
	[[ $client_version == $server_version ]] || error "Helm version mismatch between client version ($client_version) and server version ($server_version). Please upgrade helm."
}

# Start helm {{{1
################################################################

function start_helm {

	helm init || error "Cannot initialize helm !"
	helm repo add galaxy-helm-repo https://pcm32.github.io/galaxy-helm-charts || error "cannot set PhenoMeNal Helm repository."

	# Wait for Tiller to be ready
	info "Wait for Tiller to be ready..."
	while true ; do
		tiller_not_ready=$(helm status 2>&1 | grep tiller)
		[[ -n $tiller_not_ready ]] || break
	done
	info "Tiller is ready."

	check_helm
}

# Get dev folder inside container {{{1
################################################################

get_dev_folder_inside_container() {
	echo $DEVELOPMENT_FOLDER | sed s@^/home@/hosthome@
}

# Helm install {{{1
################################################################

function helm_install {

	# Options
	opt=
	[[ $DEBUG -eq 0 ]] || opt+=" --debug"
	[[ -z $CHART_VERSION ]] || opt+=" --version $CHART_VERSION"

	# Set parameters
	params=()
	[[ ( $DEV == $YES || $BLD_GLX_CONT == $YES ) && -n $DEVELOPMENT_FOLDER ]] && params+=("development_folder=$(get_dev_folder_inside_container)")
	[[ -z $PV_MINIKUBE           ]] || params+=("pv_minikube=$PV_MINIKUBE")
	[[ -z $GALAXY_ADMIN_EMAIL    ]] || params+=("galaxy_admin_email=$GALAXY_ADMIN_EMAIL")
	[[ -z $GALAXY_ADMIN_PASSWORD ]] || params+=("galaxy_admin_password=$GALAXY_ADMIN_PASSWORD")
	[[ -z $GALAXY_API_KEY        ]] || params+=("galaxy_api_key=$GALAXY_API_KEY")
	[[ $BLD_GLX_CONT != $YES || -z $TOOL2CONTAINER_MAPPING_FILE ]] || params+=("tool2container_mapping_file=$TOOL2CONTAINER_MAPPING_FILE")
	[[ $BLD_GLX_CONT != $YES || -z $GALAXY_IMAGE ]] || params+=("galaxy_image=$GALAXY_IMAGE")
	[[ $BLD_GLX_CONT != $YES ]] || params+=("galaxy_image_registry=")
	[[ -z $GALAXY_PULL_POLICY ]] || params+=("galaxy_pull_policy=$GALAXY_PULL_POLICY")
	[[ $RBAC_NEEDED != $YES ]] || params+=("rbac_needed=true")
	[[ -z $GALAXY_LOG_FILE ]] || params+=("log_file_to_track=$GALAXY_LOG_FILE")
	[[ $POSTGRES != $YES ]] || params+=("galaxy_backend_postgres=true")
	params+=("galaxy_image_tag=:latest")
	params_str=$(join , "${params[@]}")

	# Helm update
	info "Running helm update"
	helm repo update || error "Cannot update PhenoMeNal Helm repository."

	# Helm install
	info "Running helm install $opt --set $params_str $CHART"
	helm install $opt --set $params_str $CHART || error "cannot run \`helm install\`"
}

# Wait for Galaxy {{{1
################################################################

function wait_for_galaxy {

	# Wait for Galaxy
	echo -n Waiting for Galaxy...
	while ! wget -O /dev/null http://$(minikube ip):30700 2>/dev/null ; do
		echo -n .
		sleep 1
	done
	echo
	echo Galaxy is ready and listening to http://$(minikube ip):30700
}

# Get open application {{{1
################################################################

function get_open {

	# Open Galaxy page in browser
	ostype=$(uname)
	if [[ $ostype = Darwin ]] ; then
		open=open
	elif [[ $ostype = Linux ]] ; then
		open=xdg-open
	else
		error "Cannot determine which program to use for opening web page."
	fi
	[[ -n $(which $open) ]] || error "Program $open is not available."

	echo $open
}

# Open Galaxy {{{1
################################################################

function open_galaxy {
	open=$(get_open)
	info "Now opening Galaxy main page in browser..."
	$open http://$(minikube ip):30700
}

# Open minikube dashboard {{{1
################################################################

function open_minikube_dashboard {
	open=$(get_open)
	info "Now opening Minikube dashboard page in browser..."
	$open http://$(minikube ip):30000
}

# Build galaxy container {{{1
################################################################

function build_galaxy_container {

	info "Building Galaxy docker images..."
	eval $(minikube docker-env)
	if [[ $RUN_GLX_CONT_SCRIPT == $YES ]] ; then
		opt=
		[[ $DEBUG -eq 0 ]] || opt+=" -g"
		curdir=$(pwd)
		cd "$DEVELOPMENT_FOLDER"
		info "Building docker containers: bash simplified_galaxy_stable_container_creation.sh $opt +p -u $USER --web-tag \"$GALAXY_IMAGE\""
		bash simplified_galaxy_stable_container_creation.sh $opt +p -u $USER --web-tag "$GALAXY_IMAGE"
		cd "$curdir"
	else
		info "Building docker container: docker build -t \"$GALAXY_IMAGE\" \"$DEVELOPMENT_FOLDER\""
		docker build -t "$GALAXY_IMAGE" "$DEVELOPMENT_FOLDER"
	fi
}

# Display Galaxy logs {{{1
################################################################

function display_galaxy_logs {
	glx_pod=$(kubectl get pods | grep ^galaxy- | sed 's/ .*$//')
	kubectl logs -f $glx_pod
}

# Check minikube {{{1
################################################################

check_minikube() {

	# Check that is is installed
	[[ -n $(which minikube) ]] || error "Unable to find minikube. Please install minikube. See https://github.com/kubernetes/minikube/releases."

	# Check version
	current_version=$(minikube update-check | grep '^Current' | sed 's/^.*: *//')
	latest_version=$(minikube update-check | grep '^Latest' | sed 's/^.*: *//')
	info "Your minikube current version is $current_version."

	[[ $current_version == $latest_version ]] || warning "A more recent version of minikube is available ($latest_version). Your current version is $current_version. Please upgrade to the latest version. See https://github.com/kubernetes/minikube/releases."
}

# Set port forwarding {{{1
################################################################

set_port_forwarding() {
	info "Setting up port forwarding of minikube virtual machine to host."
	for port in 30000 30700 ; do
		VBoxManage controlvm "minikube" natpf1 "minikube$port,tcp,,$p,,$port" || error "Cannot forward port $port from minikube virtual machine to host."
	done
}

# MAIN {{{1
################################################################

read_args "$@"

# Stage 1, start minikube
if [[ $ALL_STAGES == $YES || $STAGE_1 == $YES ]] ; then
	check_minikube
	start_minikube
	wait_for_minikube
	[[ $PORT_FORWARDING != $YES ]] || set_port_forwarding
fi

[[ $MINIKUBE_DASHBOARD != $YES ]] || open_minikube_dashboard

# Stage 2 Start Helm
[[ $ALL_STAGES != $YES && $STAGE_2 != $YES ]] || start_helm
[[ $BLD_GLX_CONT != $YES ]] || build_galaxy_container

# Stage 3 Helm install
if [[ $ALL_STAGES == $YES || $STAGE_3 == $YES ]] ; then
	helm_install
	wait_for_galaxy
fi

[[ $OPEN_GALAXY != $YES ]] || open_galaxy

[[ $GALAXY_LOGS != $YES ]] || display_galaxy_logs
