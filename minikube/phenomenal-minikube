#!/bin/bash

# Constants {{{1
################################################################

YES=yes
SCRIPT_NAME="${0##*/}"
GALAXY_IMAGE=glx
TOOL2CONTAINER_MAPPING_FILE="phenomenal_tools2container.yaml"
GALAXY_PULL_POLICY="IfNotPresent"

# Global variables {{{1
################################################################

BLD_GLX_CONT=
GALAXY_ADMIN_EMAIL="pk.roger@icloud.com"
DEVELOPMENT_FOLDER="$HOME/dev/container-galaxy-k8s-runtime"
DEVELOPMENT_FOLDER_INSIDE_CONTAINER=$(echo $DEVELOPMENT_FOLDER | sed s@^/home@/hosthome@)
GALAXY_ADMIN_PASSWORD="pierrick"
GALAXY_API_KEY="qwertyuio"
PV_MINIKUBE="yes"
CHART=galaxy-helm-repo/galaxy
MINIKUBE_DASHBOARD=
OPEN_GALAXY=
GALAXY_LOGS=
ALL_STAGES=
STAGE_1=
STAGE_2=
STAGE_3=

# Error {{{1
################################################################

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}

# Join {{{1
################################################################

function join {

	local IFS="$1";
	shift;

	echo "$*";
}

# Print help {{{1
################################################################

function print_help {
	echo "Usage: $SCRIPT_NAME [options]"
	echo
	echo "Run PhenoMeNal Galaxy inside minikube."
	echo
	echo "Options:"
	echo "   -a, --all-stages              Run all stages."
	echo "   -1, --stage-1                 Run stage 1."
	echo "   -2, --stage-2                 Run stage 2."
	echo "   -3, --stage-3                 Run stage 3."
	echo "   -b, --build-galaxy-container  Build the Galaxy container."
	echo "   -d, --minikube-dashboard      Open the minikube dashboard in browser."
	echo "   -h, --help                    Print this help message."
	echo "   -l, --galaxy-logs             Open stream to Galaxy logs."
	echo "   -x, --open-galaxy             Open Galaxy main page in browser."
	echo
}

# Read args {{{1
################################################################

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		case $1 in
			-1|--stage-1)            STAGE_1=$YES ;;
			-2|--stage-2)            STAGE_2=$YES ;;
			-3|--stage-3)            STAGE_3=$YES ;;
			-a|--all-stages)         ALL_STAGES=$YES ;;
			-b|--build-container)    BLD_GLX_CONT=$YES ;;
			-d|--minikube-dashboard) MINIKUBE_DASHBOARD=$YES ;; 
			-h|--help)               print_help ; exit 0 ;;
			-l|--galaxy-logs)        GALAXY_LOGS=$YES ;;
			-x|--open-galaxy)        OPEN_GALAXY=$YES ;;
			-) error "Illegal option $1." ;;
			--) error "Illegal option $1." ;;
			--*) error "Illegal option $1." ;;
			-?) error "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift
	done
	shift $((OPTIND - 1))
}	

# Start minikube {{{1
################################################################

function start_minikube {
	minikube delete
	rm -rf $HOME/.helm
	minikube start || error "cannot start minikube !"
}

# Wait for Minikube {{{1
################################################################

function wait_for_minikube {

	# Wait for Minikube
	echo -n Waiting for Minikube...
	while ! wget -O /dev/null http://$(minikube ip):30000 2>/dev/null ; do
		echo -n .
		sleep 1
	done
	echo
	echo Minikube dashboard is ready and listening to http://$(minikube ip):30000
}

# Start helm {{{1
################################################################

function start_helm {

	helm init || error "cannot initialize helm !"
	helm repo add galaxy-helm-repo https://pcm32.github.io/galaxy-helm-charts || error "cannot set PhenoMeNal repository in helm."

	# Wait for Tiller to be ready
	echo Wait for Tiller to be ready...
	while true ; do
		tiller_not_ready=$(helm status 2>&1 | grep tiller)
		[[ -n $tiller_not_ready ]] || break
	done
	echo Tiller is ready.
}

# Helm install {{{1
################################################################

function helm_install {

	# Set parameters
	params=()
	[[ -z $DEVELOPMENT_FOLDER    ]] || params+=("development_folder=$DEVELOPMENT_FOLDER_INSIDE_CONTAINER")
	[[ -z $PV_MINIKUBE           ]] || params+=("pv_minikube=$PV_MINIKUBE")
	[[ -z $GALAXY_ADMIN_EMAIL    ]] || params+=("galaxy_admin_email=$GALAXY_ADMIN_EMAIL")
	[[ -z $GALAXY_ADMIN_PASSWORD ]] || params+=("galaxy_admin_password=$GALAXY_ADMIN_PASSWORD")
	[[ -z $GALAXY_API_KEY        ]] || params+=("galaxy_api_key=$GALAXY_API_KEY")
	[[ $BLD_GLX_CONT != $YES || -z $TOOL2CONTAINER_MAPPING_FILE ]] || params+=("tool2container_mapping_file=$TOOL2CONTAINER_MAPPING_FILE")
	[[ $BLD_GLX_CONT != $YES || -z $GALAXY_IMAGE ]] || params+=("galaxy_image=$GALAXY_IMAGE")
	[[ $BLD_GLX_CONT != $YES ]] || params+=("galaxy_image_registry=")
	[[ -z $GALAXY_PULL_POLICY ]] || params+=("galaxy_pull_policy=$GALAXY_PULL_POLICY")
	params_str=$(join , "${params[@]}")

	# Helm install
	echo Running helm install --set $params_str $CHART
	helm install --set $params_str $CHART || error "cannot run \`helm install\`"
}

# Wait for Galaxy {{{1
################################################################

function wait_for_galaxy {

	# Wait for Galaxy
	echo -n Waiting for Galaxy...
	while ! wget -O /dev/null http://$(minikube ip):30700 2>/dev/null ; do
		echo -n .
		sleep 1
	done
	echo
	echo Galaxy is ready and listening to http://$(minikube ip):30700
}

# Get open application {{{1
################################################################

function get_open {

	# Open Galaxy page in browser
	ostype=$(uname)
	if [[ $ostype = Darwin ]] ; then
		open=open
	elif [[ $ostype = Linux ]] ; then
		open=xdg-open
	else
		error "Cannot determine which program to use for opening web page."
	fi
	[[ -n $(which $open) ]] || error "Program $open is not available."

	echo $open
}

# Open Galaxy {{{1
################################################################

function open_galaxy {
	open=$(get_open)
	echo Now opening Galaxy main page in browser...
	$open http://$(minikube ip):30700
}

# Open minikube dashboard {{{1
################################################################

function open_minikube_dashboard {
	open=$(get_open)
	echo Now opening Minikube dashboard page in browser...
	$open http://$(minikube ip):30000
}

# Build galaxy container {{{1
################################################################

function build_galaxy_container {

	echo Building Galaxy docker image...
	eval $(minikube docker-env)
	env | grep DOCKER
	docker build -t "$GALAXY_IMAGE" "$DEVELOPMENT_FOLDER"
}

# Display Galaxy logs {{{1
################################################################

function display_galaxy_logs {
	glx_pod=$(kubectl get pods | grep ^galaxy- | sed 's/ .*$//')
	kubectl logs -f $glx_pod
}

# MAIN {{{1
################################################################

read_args "$@"

# Stage 1, start minikube
if [[ $ALL_STAGES == $YES || $STAGE_1 == $YES ]] ; then
	start_minikube
	wait_for_minikube
fi

[[ $MINIKUBE_DASHBOARD != $YES ]] || open_minikube_dashboard

# Stage 2 Start Helm
[[ $ALL_STAGES != $YES && $STAGE_2 != $YES ]] || start_helm
[[ $BLD_GLX_CONT != $YES ]] || build_galaxy_container

# Stage 3 Helm install
if [[ $ALL_STAGES == $YES || $STAGE_3 == $YES ]] ; then
	helm_install
	wait_for_galaxy
fi

[[ $OPEN_GALAXY != $YES ]] || open_galaxy

[[ $GALAXY_LOGS != $YES ]] || display_galaxy_logs
